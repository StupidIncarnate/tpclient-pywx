#!/usr/bin/python
# simple_changelog - A simple example of how to use the changelog.py module.
# Copyright (C) 2006 James Westby <jw+debian@jameswestby.net>
#
# Modidified by: Paul Schulz <paul@mawsonlakes.org>
# for the Thousand Parsec project.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import sys; sys.path.insert(0,'..');
import time
import os
	
import version as vi
	
from debian_bundle.changelog import Changelog, Version

changelog = Changelog()

if not hasattr(vi, 'version_target'):
	raise SyntaxError("Cant not use this script on a non-development version!")

currentdir = os.path.realpath(os.curdir)
print "Currently in %s" % currentdir

############################################################################
# Get the git version, depends on git being installed!
############################################################################
# Make sure we are in the right directory...
os.chdir('..')
# Get the git-describe version..
import popen2

gitread, gitwrite, giterror = popen2.popen3('git-describe')

giterrorstr = giterror.read()
if len(giterrorstr) > 0:
	raise SyntaxError("git-describe failed! Error follows\n%s" % giterrorstr)

gitdescribe = gitread.read()
if len(gitdescribe) < 5:
	raise SyntaxError("git-describe didn't output what it should, got %r" % gitdescribe)

# Split the tag apart,
tag, commits, gitcommit = gitdescribe.strip().split('-')
packagea, packageb, a, b, c = tag.split('_')

if "_".join([packagea, packageb]) != 'TPCLIENT_PYWX':
	raise SyntaxError("Tag must be 'TPCLIENT_PYWX'")

tag_version = (int(a), int(b), int(c))
if tag_version != vi.version:
	raise SyntaxError("Version %s doesn't match latest tag %r!" % (vi.version, tag_version))

os.chdir(currentdir)
##############################################################################

debversion = "%s+%s+git.%s.%s-1auto1" % (vi.version_str, vi.version_target_str, commits, gitcommit)
print "This version of this deb will be %s" % debversion
changelog.new_block(package='tpclient-pywx',
                    version=debversion,
                    distributions='unstable',
                    urgency='low',
                    author='Paul Schulz <paul@mawsonlakes.org>',
				    date=time.strftime("%a, %e %b %Y %H:%M:%S %z"),
                    )

changelog.add_change('')
changelog.add_change('  * Daily build')
changelog.add_change("  * Git 'describe': %s" % (gitdescribe))
changelog.add_change("  * Git Commit: %s" % (vi.version_git))
changelog.add_change('')

try:
  filename =  'changelog'
#  filename = sys.argv[1]
except IndexError:
  print "No 'changelog' file found."
  sys.exit(1)

os.rename('changelog','changelog.old');

f = open(filename, 'w')

try:
  changelog.write_to_open_file(f)
finally:
  f.close()

file(filename, 'a').write(file("%s.old" % filename, 'r').read())

os.unlink("%s.old" % filename )

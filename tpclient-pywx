
# Version check
try:
	import wxPython
	import string
	
	version = string.split(wxPython.__version__, '.')
	intversion = int(version[0])*1000000+int(version[1])*10000+int(version[2])*100

except ImportError:
	intversion = 0

if intversion < 2050000:
	print "Your version of wxPython is too old. You will not be able to run pywx-client."
	print "You have version", version
	print "You need version atleast", [2, 5, 0, 0]
	import sys
	sys.exit(1)
else:
	del wxPython
	del string

import sys

# wx.Python imports
import wx
import extra.fixdc

# Python Imports
from math import *
from copy import *
from types import *

import string
import pprint
import thread

import sys
sys.path.append("..")

from netlib import Connection
from netlib import failed

from utils import *
from config import *

from windows.control import MainControl

class Splash(wx.SplashScreen):
	def __init__(self, application):
		image = wx.Image("graphics/splash.png").ConvertToBitmap()
		wx.SplashScreen.__init__(self, image, wx.SPLASH_CENTRE_ON_SCREEN | wx.SPLASH_TIMEOUT, 3000, None, -1)

		self.application = application
		
		self.Bind(wx.EVT_CLOSE, self.OnClose)

	def OnClose(self, evt):
		self.Hide()
		self.application.windows.connect.Show(True)

class AppTP(wx.App):
	def __init__(self):
		wx.App.__init__(self)

		try:
			print "AppTp.OnInit.AllImageHandlers"
			wx.InitAllImageHandlers()
			
			self.config = self.ConfigLoad()
			
			print "AppTp.OnInit.windows"
			self.windows = MainControl(self)

			print "AppTp.OnInit.connection"
			self.connection = Connection()
		
			splash = Splash(self)
			splash.Show()

		except:
			do_traceback()

	def ConfigLoad(self):
		print "AppTp.ConfigLoad"

		try:
			import sys
			sys.path.append("var")
			import config as config
			self.config = config
		except ImportError:
			config = Blank()
			config.splash = True
			config.tips = True
			config.autoconnect = False

			config.host = "127.0.0.1"
			config.username = ""
			config.password = ""

		return config

	def ConfigSave(self):
		print "AppTp.ConfigSave"

		data = """\
# Show the splash screen on startup
splash = %(splash)s
 
# Show the "tips" on startup
tips = %(tips)s
 
# On startup connect to the default server
autoconnect = %(autoconnect)s
 
# Autoconnect information
host = "%(host)s"
username = "%(username)s"
password = "%(password)s"
""" % self.config.__dict__
		open(os.path.join("var", "config"), "w+").write(data)

	def CacheLoad(self):
		pass

	def CacheSave(self):
		pass

	def CacheUpdate(self):
		progress = wx.ProgressDialog("TP: Downloading Universe", "pywx-client is now downloading the Universe.", \
			100, self.windows.connect, wx.PD_APP_MODAL | wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_REMAINING_TIME)

		class Blank:
			pass
		
		self.cache = Blank()
		self.cache.objects = {}
		self.cache.orders = {}
		self.cache.boards = {}
		self.cache.messages = {}

		# Download objects
		objects = self.connection.get_objects(0)
		while len(objects) > 0:
			object = objects.pop(0)
			
			if failed(object):
				print object
				continue
			
			self.cache.objects[object.id] = object
			
			# Download the objects inside this object
			if len(object.contains) > 0:
				# Set the parent relationship
				for nobject in self.connection.get_objects(object.contains):
					if failed(nobject):
						print nobject
						continue
					else:
						nobject.parent = object.id
					objects.append(nobject)

			# Download the orders from this object
			if object.order_number == 0:
				orders = []
			else:
				orders = self.connection.get_orders(object.id, range(0, object.order_number))

			self.cache.orders[object.id] = list(orders)
			progress.Update(len(self.cache.objects.keys()))

		# Download any order descriptions not already downloaded
		descs = []
		while True:
			r = self.connection.get_orderdescs(len(descs))[0]
			if not failed(r):
				descs.append(r)
				descs[-1].register()
			else:
				break

		# Download message boards
		board = self.connection.get_boards(0)[0]
		if not failed(board):
			# Download the messages from this board
			if board.number == 0:
				messages = []
			if board.number == 1:
				messages = self.connection.get_messages(board.id, range(0, board.number))
				if not hasattr(messages, "__getitem__"):
					messages = [messages]
				else:
					messages = list(messages)
			else:
				messages = self.connection.get_messages(board.id, range(0, board.number))
			self.cache.messages[board.id] = list(messages)
		else:
			self.cache.messages[0] = []

		progress.Update(100)
		self.windows.Post(wx.local.CacheUpdateEvent())

	def Exit(self):
		print "AppTp.exit"
		sys.exit(1)

if __name__ == '__main__':
	try:
		app = AppTP()
		app.MainLoop()
	finally:
		do_traceback()
		sys.stdin.read(1)
	


import sys

# wxPython imports
from wxPython.wx import *

# Python Imports
from math import *
from copy import *

import string
import pprint
import thread

from network import protocol
from network.nthread import NetworkThread
from network.events import *

from game.game import Game
from game.gthread import GameThread

from utils import *
from config import *

from windows.control import MainControl

class AppTP(wxApp):
	def ConfigLoad(self):
		config = load_data("main")

		if not config:
			# Create some default positioning, good for 1024x768 on linux
			config = Blank()
	
	def OnInit(self):
		wxInitAllImageHandlers()

		self.connected = FALSE
		self.logined = FALSE
		
		# Start up the windows
		try:
			self.windows = MainControl(self)
		except:
			do_traceback()

		# Startup the Game
		try:
			self.game = Game(self)
			thread.start_new_thread(self.game)
		except:
			do_traceback()

		# Startup the Network
		try:
			self.network = NetworkThread(self)
			thread.start_new_thread(self.network)

			self.network.win_connect(self)
		except:
			do_traceback()

		# If autoconnect
		if FALSE:
			try:
				self.Connect(host, username, password)
			except:
				# Pop-up a dialog saying connected failed.
				pass
		else:
			self.windows.connect.Show(TRUE)
		
		return TRUE
		
	def ConnectTo(self, host, port, username, password):
	
		self.username = username
		self.password = password
		
		if not self.connected or self.host != host or self.port == port:
			self.host = host
			self.port = port

			self.network.connect(self.host, self.port)
			if not self.socket:
				self.windows.connect.OnConnection(None)
				return

			EVT_NETWORK_PACKET(self, self.OnPacket)

			c = protocol.Connect()
			self.network.send(c)
		
		else:
			# Just resend the username/password
			self.Login()

	def Login(self):
		l = protocol.Login(username=self.username, password=self.password)
		self.socket.send(str(l))

	def OnPacket(self, evt):
		try:
			if not self.connected:
				# Check to see if this is our success packet
				if isinstance(evt.value, protocol.Ok):
					# Yay we connected okay!
					self.connected = TRUE
				
					# Now we should login
					self.Login()
				
				elif isinstance(evt.value, protocol.Fail):
					# Ekk the server is busy
					pass
				else:
					raise SocketError("The server sent an unknown packet")

			elif not self.logined:
				if isinstance(evt.value, protocol.Ok):
					# Yay we connected okay!
					self.logined = TRUE
					
					# Setup and register the universe

					# Okay now try to get the universe
					g = protocol.GetObject(id=0)
					evt.network.socket.send(str(g))
					
				else:
					# We failed to login :( username/password is most proberly bad.
					pass
			else:
				# Now we are logged in okay just pass everything on to the game engine
				self.game.OnPacket(evt)
		
		finally:
			evt.next()

	def Exit(self):
		pprint.pprint(self.game.map)
		sys.exit(1)

if __name__ == '__main__':
	try:
		app = AppTP()
		app.MainLoop()
	finally:
		do_traceback()
		sys.stdin.read(1)
	

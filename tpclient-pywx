#! /usr/bin/env python

import requirements
import sys

# wx.Python imports
import wx
import extra

# Python Imports
import pprint
import socket
import time
import threading
from types import *

# Local imports
import utils
from utils import debug, DEBUG_MAIN, DEBUG_GUI, DEBUG_NETWORK
from tp.netlib import Connection, failed, constants
from tp.client.cache import Cache

def make(thread, method):
	def t(*args, **kw):
		thread.Call(method, *args, **kw)
	return t

class Application(object):
	"""
	Container for all the applications threads and the network cache.

	Calling accross threads requires you to use the .Call method on each thread - DO NOT call directly!
	The cache can be accessed by either thread at any time - be careful.
	"""
	
	def __init__(self):
		self.gui = GUI(self)
		self.network = Network(self)

		self.cache = None
		
		# Load the Configuration
		self.ConfigLoad()

	def Run(self):
		"""\
		Set the application running.
		"""
		self.gui.Show(self.gui.connectto)

		self.network.start()
		self.gui.start()

	def ConfigDisplay(self):
		"""\
		Pop-up the configuration window.
		"""
		self.gui.ConfigDisplay()

	def ConfigSave(self):
		"""\
		"""
		# FIXME: This should be fixed, utils needs to go away
		config = self.gui.ConfigSave()
		utils.save_data("pywx_preferences", config)
		
		debug(DEBUG_MAIN, "Saving the config...\n" + pprint.pformat(config))

	def ConfigLoad(self):
		"""\
		"""
		config = utils.load_data("pywx_preferences")
		if config is None:
			config = {}
	
		debug(DEBUG_MAIN, "Loading the config...\n" + pprint.pformat(config))
		
		self.gui.ConfigLoad(config)

	def Post(self, event):
		"""\
		Post an application wide event to every thread.
		"""
		self.gui.Call(self.gui.Post, event)
		self.network.Call(self.network.Post, event)

	def Exit(self):
		"""
		Exit the program.
		"""
		self.gui.Call(self.gui.Cleanup)
		self.network.Call(self.network.Cleanup)

class GUI(wx.App, threading.Thread):
	## These are window events
	class ShowWindowEvent(wx.PyEvent):
		"""\
		Raised when the the windows are showed.
		"""
		pass

	class SelectObjectEvent(wx.PyEvent):
		"""\
		Raised when an object is selected.
		"""
		def __init__(self, id):
			self.id = id
	
		def __str__(self):
			return "<SelectObjectEvent id=%s>" % self.id
	
	class SelectPositionEvent(wx.PyEvent):
		"""\
		Raised when a position is selected.
		"""
		def __init__(self, pos):
			self.x, self.y, self.z = pos
		
		def __str__(self):
			return "<SelectPositionEvent (%s, %s %s)>" % (self.x, self.y, self.z)
	
	class SelectOrderEvent(wx.PyEvent):
		"""\
		Raised when an order is selected.
		"""
		def __init__(self, id, slots):
			self.id = id
			self.slots = slots
		
		def __str__(self):
			return "<SelectOrderEvent id=%s slots=%s>" % (self.id, self.slots)

	class DirtyOrderEvent(wx.PyEvent):
		"""\
		Raised when an order is selected.
		"""
		def __init__(self, order):
			self.id = order.id
			self.slot = order.slot
			self.order = order
		
		def __str__(self):
			return "<SelectOrderEvent id=%s slots=%s>" % (self.id, self.slots)

	######################################
	def __init__(self, application):
		threading.Thread.__init__(self)
		if wx.Platform in ('__WXMSW__', '__WXMAC__'):
			wx.App.__init__(self, redirect = True, filename = 'errors')
			self.start = self.run
		else:
			wx.App.__init__(self)

		self.application = application
		self.exit = False

		self.current = None

		try:
			wx.InitAllImageHandlers()
			
			# Show the splash screen
			from windows.winSplash import winSplash
			self.splash = winSplash(application)
			self.Show(self.splash)
			
			# Load the other main windows
			from windows.winMain import winMain
			self.main = winMain(application)

			from windows.winConnect import winConnect
			self.connectto = winConnect(application)

			from windows.winUpdate import winUpdate
			self.update = winUpdate(application)

			from windows.winDebug import winDebug
			self.debug = winDebug(application)
		
			self.windows = (self.main, self.connectto, self.update, self.debug)
		
			from windows.winConfig import winConfig
			self.config = winConfig(application, self.windows)

		except:
			utils.do_traceback()

	def run(self):
		self.MainLoop()

	def Cleanup(self):
		for window in self.windows:
			window.Close()
		while self.application.network.isAlive():
			time.sleep(0.1)
		sys.exit()

	# Config Functions ------------------------------------------------
	def ConfigDisplay(self):
		"""\
		Display the configuration window.
		"""
		self.config.Show(True)

	def ConfigSave(self):
		"""\
		Display the configuration window.
		"""
		config = {}
		for window in self.windows:
			config[window.title] = window.ConfigSave()
		return config

	def ConfigLoad(self, config):
		"""\
		Display the configuration window.
		"""
		for window in self.windows:
			window.ConfigLoad(config.get(window.title, {}))

	# Inter-Thread Functions ------------------------------------------------
	def Call(self, method, *args, **kw):
		"""\
		Call a method in this thread.
		"""
		wx.CallAfter(method, *args, **kw)

	def Post(self, event):
		"""
		Post an Event the current window.
		"""
		func = 'On' + event.__class__.__name__[:-5]
		#debug(DEBUG_GUI, "Posting %s to %s" % (event, func))
		if hasattr(self, func):
			try:
				getattr(self, func)(event)
			except Exception, e:
				utils.do_traceback()

		self.current.Post(event)

	def Show(self, window):
		"""
		Change to a certain main window.
		"""
		if window == self.current:
			return

		if self.current != None:
			self.current.Hide()

		self.current = window
		r = self.current.Show()

		self.Post(self.ShowWindowEvent())
		return r

	# Event Handlers ------------------------------------------------
	def OnNetworkFailure(self, evt):
		self.Show(self.connectto)

		# When the network fails pop-up a dialog then go to the connectto screen
		dlg = wx.MessageDialog(self.current, str(evt), _("Network Error"), wx.OK|wx.ICON_ERROR)
		dlg.ShowModal()
		dlg.Destroy()

class Network(threading.Thread):

	## These are network events
	class NetworkFailureEvent(Exception):
		"""\
		Raised when the network connection fails for what ever reason.
		"""
		pass

	######################################

	def __init__(self, application):
		threading.Thread.__init__(self)
		self.application = application
		self.exit = False

		self.tocall = []
		self.connection = Connection()
	
	def run(self):
		while not self.exit:
			if len(self.tocall) <= 0:
				if hasattr(time, 'sleep'):
					time.sleep(0.1)
				continue
			
			method, args, kw = self.tocall.pop(0)
			try:
				method(*args, **kw)
			except (IOError, socket.error), e:
				s  = _("There was an unknown network error.\n")
				s += _("Any changes since last save have been lost.\n")
				if getattr(self.connection, 'debug', False):
					s += _("A traceback of the error was printed to the console.\n")
					utils.do_traceback()
				self.application.Post(self.NetworkFailureEvent(s))

	def Cleanup(self):
		self.exit = True

	def Call(self, method, *args, **kw):
		"""\
		Call a method in this thread.
		"""
		self.tocall.append((method, args, kw))

	def Post(self, event):
		"""
		Post an Event the current window.
		"""
		func = 'On' + event.__class__.__name__[:-5]
		debug(DEBUG_NETWORK, "Posting %s to %s" % (event, func))
		if hasattr(self, func):
			getattr(self, func)(event)

	def ConnectTo(self, host, username, password, debug=False):
		"""\
		Connect to a given host using a certain username and password.
		"""
		# FIXME: This should be sending events really
		gui = self.application.gui
		up = make(gui, gui.update.Update)
	
		# Show the Update window
		gui.Call(gui.Show, gui.update)
		
		up("Connecting...", mode="connecting")
		if self.connection.setup(host=host, debug=debug):
			s  = _("The client was unable to connect to the host.\n")
			s += _("This could be because the server is down or there is a problem with the network.\n")
			self.application.Post(self.NetworkFailureEvent(s))
			return
			
		up("Looking for Thousand Parsec Server...")
		if failed(self.connection.connect()):
			s  = _("The client connected to the host but it did not appear to be a Thousand Parsec server.\n")
			s += _("This could be because the server is down or the connection details are incorrect.\n")
			self.application.Post(self.NetworkFailureEvent(s))
			return

		up("Logining In")
		if failed(self.connection.login(username, password)):
			s  = _("The client connected to the host but could not login because the username of password was incorrect.\n")
			s += _("This could be because you are connecting to the wrong server or mistyped the username or password.\n")
			self.application.Post(self.NetworkFailureEvent(s))
			return

		# Create a new cache
		self.application.cache = Cache(Cache.key(host, username))
		self.CacheUpdate()

	def CacheUpdate(self):
		gui = self.application.gui
		callback = make(gui, gui.update.Update)

		# Show the update window
		gui.Call(gui.Show, gui.update)
		
		self.application.cache.update(self.connection, callback)
		# Save the cache now we have a consistant state
		self.application.cache.save()
	
		gui.Call(gui.Show, gui.main)
		self.application.Post(self.application.cache.CacheUpdateEvent(None))
		return

	def OnCacheDirty(self, evt):
		"""\
		When the cache gets dirty we have to push the changes to the server.
		"""
		try:
			if evt.what == "orders":
				if evt.action in ("remove", "change"):
					if failed(self.connection.remove_orders(evt.id, evt.slot)):
						raise IOError("Unable to remove the order...")
				
				if evt.action in ("create", "change"):
					if failed(self.connection.insert_order(evt.id, evt.slot, evt.change)):
						raise IOError("Unable to insert the order...")

					if evt.slot == -1:
						evt.slot = len(self.application.cache.orders[evt.id])
						
					o = self.connection.get_orders(evt.id, evt.slot)[0]
					if failed(o):
						raise IOError("Unable to get the order..." + o[1])

					evt.change = o
			elif evt.what == "messages" and evt.action == "remove":
				if failed(self.connection.remove_messages(evt.id, evt.slot)):
					raise IOError("Unable to remove the order...")
			else:
				raise ValueError("Can't deal with that yet!")
			self.application.cache.apply(evt)
			self.application.Post(evt)

		except Exception, e:
			utils.do_traceback()
			self.application.Post(self.NetworkFailureEvent(e))
			"There where the following errors when trying to send changes to the server:"
			"The following updates could not be made:"


if __name__ == '__main__':
	try:
		app = Application()
		app.Run()
	finally:
		utils.do_traceback()

#! /usr/bin/env python

import requirements
import sys

# wx.Python imports
import wx
import extra

# Python Imports
import pprint
import socket
import time
import threading
from types import *

# Local imports
from __init__ import version

import utils
from utils import debug, DEBUG_MAIN, DEBUG_GUI, DEBUG_NETWORK

from tp.netlib import Connection, failed, constants
from tp.client.threads import Application, NetworkThread
from tp.client.cache import Cache


def make(thread, method):
	def t(*args, **kw):
		thread.Call(method, *args, **kw)
	return t

class GUI(wx.App):
	## These are window events
	class ShowWindowEvent(wx.PyEvent):
		"""\
		Raised when the the windows are showed.
		"""
		pass

	class SelectObjectEvent(wx.PyEvent):
		"""\
		Raised when an object is selected.
		"""
		def __init__(self, id):
			self.id = id
	
		def __str__(self):
			return "<SelectObjectEvent id=%s>" % self.id
	
	class SelectPositionEvent(wx.PyEvent):
		"""\
		Raised when a position is selected.
		"""
		def __init__(self, pos):
			self.x, self.y, self.z = pos
		
		def __str__(self):
			return "<SelectPositionEvent (%s, %s %s)>" % (self.x, self.y, self.z)
	
	class SelectOrderEvent(wx.PyEvent):
		"""\
		Raised when an order is selected.
		"""
		def __init__(self, id, slots):
			self.id = id
			self.slots = slots
		
		def __str__(self):
			return "<SelectOrderEvent id=%s slots=%s>" % (self.id, self.slots)

	class DirtyOrderEvent(wx.PyEvent):
		"""\
		Raised when an order is selected.
		"""
		def __init__(self, order):
			self.id = order.id
			self.slot = order.slot
			self.order = order
		
		def __str__(self):
			return "<SelectOrderEvent id=%s slots=%s>" % (self.id, self.slots)

	######################################
	def __init__(self, application):
		if wx.Platform in ('__WXMSW__', '__WXMAC__'):
			wx.App.__init__(self, redirect = True, filename = 'errors')
		else:
			wx.App.__init__(self)

		self.start = self.MainLoop

		self.application = application
		self.exit = False

		self.current = None

		try:
			wx.InitAllImageHandlers()
			
			# Show the splash screen
			from windows.winSplash import winSplash
			self.splash = winSplash(application)
			self.Show(self.splash)
			
			# Load the other main windows
			from windows.winMain import winMain
			self.main = winMain(application)

			from windows.winConnect import winConnect
			self.connectto = winConnect(application)

			from windows.winUpdate import winUpdate
			self.update = winUpdate(application)

			from windows.winDebug import winDebug
			self.debug = winDebug(application)
		
			self.windows = (self.main, self.connectto, self.update, self.debug)
		
			from windows.winConfig import winConfig
			self.config = winConfig(application, self.windows)

		except:
			utils.do_traceback()

	def Cleanup(self):
		for window in self.windows:
			window.Close()
		while self.application.network.isAlive():
			time.sleep(0.1)
		sys.exit()

	# Config Functions ------------------------------------------------
	def ConfigDisplay(self):
		"""\
		Display the configuration window.
		"""
		self.config.Show(True)

	def ConfigSave(self):
		"""\
		Display the configuration window.
		"""
		config = {}
		for window in self.windows:
			config[window.title] = window.ConfigSave()
		return config

	def ConfigLoad(self, config):
		"""\
		Display the configuration window.
		"""
		for window in self.windows:
			window.ConfigLoad(config.get(window.title, {}))

	# Inter-Thread Functions ------------------------------------------------
	def Call(self, method, *args, **kw):
		"""\
		Call a method in this thread.
		"""
		wx.CallAfter(method, *args, **kw)

	def Post(self, event):
		"""
		Post an Event the current window.
		"""
		func = 'On' + event.__class__.__name__[:-5]
		#debug(DEBUG_GUI, "Posting %s to %s" % (event, func))
		if hasattr(self, func):
			try:
				getattr(self, func)(event)
			except Exception, e:
				utils.do_traceback()

		self.current.Post(event)

	def Show(self, window):
		"""
		Change to a certain main window.
		"""
		if window == self.current:
			return

		if self.current != None:
			self.current.Hide()

		self.current = window
		r = self.current.Show()

		self.Post(self.ShowWindowEvent())
		return r

	# Event Handlers ------------------------------------------------
	def OnNetworkFailure(self, evt):
		self.Show(self.connectto)

		# When the network fails pop-up a dialog then go to the connectto screen
		dlg = wx.MessageDialog(self.current, str(evt), _("Network Error"), wx.OK|wx.ICON_ERROR)
		dlg.ShowModal()
		dlg.Destroy()

class Network(NetworkThread):

	## These are network events
	class NetworkFailureEvent(Exception):
		"""\
		Raised when the network connection fails for what ever reason.
		"""
		pass

	def ConnectTo(self, host, username, password, debug=False):
		"""\
		Connect to a given host using a certain username and password.
		"""
		# FIXME: This should be sending events really
		gui = self.application.gui
		up = make(gui, gui.update.Update)

		# Show the Update window
		gui.Call(gui.Show, gui.update)
		if NetworkThread.ConnectTo(self, host, username, password, up, cs="tpclient-pywx/%i.%i.%i" % version):
			self.CacheUpdate()

	def CacheUpdate(self):
		gui = self.application.gui
		callback = make(gui, gui.update.Update)

		# Show the update window
		gui.Call(gui.Show, gui.update)
		
		NetworkThread.CacheUpdate(self, callback)
	
		gui.Call(gui.Show, gui.main)
		self.application.Post(self.application.cache.CacheUpdateEvent(None))

	def EOTUpdate(self):
		gui = self.application.gui
		timeRemaining = self.connection.time()

		if failed(timeRemaining):
			return
		gui.Call( gui.main.statusbar.SetEndTime, timeRemaining)

_Application = Application
class Application(_Application):
	def Run(self):
		"""\
		Set the application running.
		"""
		self.gui.Show(self.gui.connectto)
		_Application.Run(self)

	def ConfigDisplay(self):
		"""\
		Pop-up the configuration window.
		"""
		self.gui.ConfigDisplay()

	GUIClass = GUI
	NetworkClass = Network
	ConfigFile = "pywx_preferences"

if __name__ == '__main__':
	try:
		app = Application()
		app.Run()
	finally:
		utils.do_traceback()

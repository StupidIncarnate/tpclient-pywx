
import sys

# wxPython imports
from wxPython.wx import *

# Python Imports
from math import *
from copy import *

import string
import pprint
import thread

from network import protocol
from network.nthread import network_thread
from network.events import *

from utils import *
from config import *

class MainControl:

	def ConfigLoad(self):
		config = load_data("windows")

		if not config:

			# Create some default positioning, good for 1024x768 on linux
			config = Blank()
			config.main = Blank()
			config.message = Blank()
			config.starmap = Blank()
			config.system = Blank()

			sc_width = 1024
			sc_height = 768

			map_width = 600
			map_height = 500

			padding = 5

			middle = sc_width-map_width-padding

			config.main.pos = (0,0)
			config.main.size = (middle, 50)
			config.main.show = TRUE
			
			config.message.pos = (0, map_height-padding*4)
			config.message.size = (middle, 200)
			config.message.show = TRUE

			config.starmap.pos = (middle+padding, 0)
			config.starmap.size = (map_width-padding, map_height-padding*2)
			config.starmap.show = TRUE

			config.system.pos = (middle+padding, map_height)
			config.system.size = (map_width-padding, 200)
			config.system.show = TRUE
		
			config.raise_ = "All on All" 
	
		return config

	def ConfigSave(self):
		config = self.config
		config.main.pos = self.main.GetPositionTuple()
		config.main.size = self.main.GetSizeTuple()
		config.main.show = self.main.IsShown()
		config.message.pos = self.message.GetPositionTuple()
		config.message.size = self.message.GetSizeTuple()
		config.message.show = self.main.IsShown()
		config.starmap.pos = self.starmap.GetPositionTuple()
		config.starmap.size = self.starmap.GetSizeTuple()
		config.starmap.show = self.main.IsShown()
		config.system.pos = self.system.GetPositionTuple()
		config.system.size = self.system.GetSizeTuple()
		config.system.show = self.main.IsShown()

		save_data("windows", config)

	def ConfigActivate(self, show=TRUE):
		config = self.config

		self.main.SetPosition(config.main.pos)
		self.main.SetSize(config.main.size)
		self.message.SetPosition(config.message.pos)
		self.message.SetSize(config.message.size)
		self.starmap.SetPosition(config.starmap.pos)
		self.starmap.SetSize(config.starmap.size)
		self.system.SetPosition(config.system.pos)
		self.system.SetSize(config.system.size)
		
		if show:
			self.main.Show(config.main.show)
			self.message.Show(config.message.show)
			self.starmap.Show(config.starmap.show)
			self.system.Show(config.system.show)

	def __init__(self, app):

		self.app = app

		##########
		# Load the windows
		##########
		from windows.winConfig  import winConfig
		from windows.winConnect import winConnect
		from windows.winMain    import winMain
		from windows.winMessage import winMessage
		from windows.winStarMap import winStarMap
		from windows.winSystem  import winSystem

		config = self.ConfigLoad()
		self.config = config

		self.main = winMain(app, config.main.pos, config.main.size)

		self.winconfig = winConfig(app, self.main)
		self.connect = winConnect(app, -1, None)
		
		self.message = winMessage(app, self.main, config.message.pos, config.message.size)
		
		self.starmap = winStarMap(app, self.main, config.starmap.pos, config.starmap.size)
		self.system = winSystem(app, self.main, config.system.pos, config.system.size)

		self.ConfigActivate(FALSE)

	def Raise(self):
		"""\
			Raise all the windows.
		"""
		self.system.Raise()
		self.message.Raise()
		self.starmap.Raise()
		self.main.Raise()

		self.winconfig.Raise()
		self.connect.Raise()

	def Show(self):
		"""\
			Show the main window
		"""
		config = self.config
		self.main.Show(config.main.show)
		self.message.Show(config.message.show)
		self.starmap.Show(config.starmap.show)
		self.system.Show(config.system.show)

		# Move everything to there home positions
		self.ConfigActivate()

	def Hide(self):
		"""\
			Show the main window
		"""
		self.main.Show(FALSE)
		self.message.Show(FALSE)
		self.starmap.Show(FALSE)
		self.system.Show(FALSE)

class AppTP(wxApp):
	def ConfigLoad(self):
		config = load_data("windows")

		if not config:

			# Create some default positioning, good for 1024x768 on linux
			config = Blank()
	
	def OnInit(self):
		wxInitAllImageHandlers()

		try:
			self.windows = MainControl(self)
		except:
			do_traceback()
		self.connected = FALSE
		self.logined = FALSE

		# If autoconnect
		if FALSE:
			try:
				self.Connect(host, username, password)
			except:
				# Pop-up a dialog saying connected failed.
				pass
		else:
			self.windows.connect.Show(TRUE)
		
		return TRUE
		
	def ConnectTo(self, host, port, username, password):
	
		self.username = username
		self.password = password
		
		if not self.connected or self.host != host or self.port == port:
			self.host = host
			self.port = port
			
			self.socket = protocol.create_socket(self.host, self.port)
			if not self.socket:
				self.windows.connect.OnConnection(None)
				return
		
			self.network = network_thread([self, self.windows.connect])
			args = tuple([self.socket])
			thread.start_new_thread(self.network, args)

			EVT_NETWORK_PACKET(self, self.OnPacket)

			c = protocol.Connect()
			self.socket.send(str(c))
		
		else:
			# Just resend the username/password
			self.Login()

	def Login(self):
		l = protocol.Login(username=self.username, password=self.password)
		self.socket.send(str(l))

	def OnPacket(self, event):
		try:
			if not self.connected:
				# Check to see if this is our success packet
				if isinstance(event.value, protocol.Ok):
					# Yay we connected okay!
					self.connected = TRUE
				
					# Now we should login
					self.Login()
				
				elif isinstance(event.value, protocol.Fail):
					# Ekk the server is busy
					pass
				else:
					raise SocketError("The server sent an unknown packet")
			elif not self.logined:
				if isinstance(event.value, protocol.Ok):
					# Yay we connected okay!
					self.logined = TRUE
					
					# Setup and register the universe

					# Okay now try to get the universe
					g = protocol.GetObject(id=0)
					self.socket.send(str(g))
					
				else:
					# We failed to login :( username/password is most proberly bad.
					pass
			else:
				# Okay we are connected now, we don't need to do anything now
				pass
		
		finally:
			self.network.next()

	def Exit(self):
		sys.exit(1)

if __name__ == '__main__':
	try:
		app = AppTP()
		app.MainLoop()
	finally:
		do_traceback()
		sys.stdin.read(1)
	
